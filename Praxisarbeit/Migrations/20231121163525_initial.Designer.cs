// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Praxisarbeit.Model;

#nullable disable

namespace Praxisarbeit.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231121163525_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Praxisarbeit.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Praxisarbeit.Model.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DaysToCompletion")
                        .HasColumnType("int");

                    b.Property<string>("PriorityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DaysToCompletion = 12,
                            PriorityType = "Tief"
                        },
                        new
                        {
                            Id = 2,
                            DaysToCompletion = 7,
                            PriorityType = "Standard"
                        },
                        new
                        {
                            Id = 3,
                            DaysToCompletion = 5,
                            PriorityType = "Express"
                        });
                });

            modelBuilder.Entity("Praxisarbeit.Model.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Beschreibung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Beschreibung = "Kleiner Service"
                        },
                        new
                        {
                            Id = 2,
                            Beschreibung = "Grosser Service"
                        },
                        new
                        {
                            Id = 3,
                            Beschreibung = "Rennski-Service"
                        },
                        new
                        {
                            Id = 4,
                            Beschreibung = "Bindung montieren und einstellen"
                        },
                        new
                        {
                            Id = 5,
                            Beschreibung = "Fell zuschneiden"
                        },
                        new
                        {
                            Id = 6,
                            Beschreibung = "Heisswachsen"
                        });
                });

            modelBuilder.Entity("Praxisarbeit.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "admin",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Password = "M1",
                            UserName = "Mitarbeiter1"
                        },
                        new
                        {
                            Id = 3,
                            Password = "M2",
                            UserName = "Mitarbeiter2"
                        },
                        new
                        {
                            Id = 4,
                            Password = "M3",
                            UserName = "Mitarbeiter3"
                        },
                        new
                        {
                            Id = 5,
                            Password = "M4",
                            UserName = "Mitarbeiter4"
                        },
                        new
                        {
                            Id = 6,
                            Password = "M5",
                            UserName = "Mitarbeiter5"
                        },
                        new
                        {
                            Id = 7,
                            Password = "M6",
                            UserName = "Mitarbeiter6"
                        },
                        new
                        {
                            Id = 8,
                            Password = "M7",
                            UserName = "Mitarbeiter7"
                        },
                        new
                        {
                            Id = 9,
                            Password = "M8",
                            UserName = "Mitarbeiter8"
                        },
                        new
                        {
                            Id = 10,
                            Password = "M9",
                            UserName = "Mitarbeiter9"
                        },
                        new
                        {
                            Id = 11,
                            Password = "M10",
                            UserName = "Mitarbeiter10"
                        });
                });

            modelBuilder.Entity("Praxisarbeit.Model.Order", b =>
                {
                    b.HasOne("Praxisarbeit.Model.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Praxisarbeit.Model.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Praxisarbeit.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Priority");

                    b.Navigation("Service");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
